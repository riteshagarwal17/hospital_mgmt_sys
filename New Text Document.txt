package com.hospitalmanagement.controller;

import com.hospitalmanagement.model.Patient;
import com.hospitalmanagement.service.PatientService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyLong;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class PatientControllerTest {

    @InjectMocks
    private PatientController patientController;

    @Mock
    private PatientService patientService;

    private Patient patient1;
    private Patient patient2;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        patient1 = new Patient(1L, "John Doe", 30, "M");
        patient2 = new Patient(2L, "Jane Doe", 25, "F");
    }

    @Test
    public void testGetAllPatients() {
        when(patientService.getAllPatients()).thenReturn(Arrays.asList(patient1, patient2));

        List<Patient> patients = patientController.getAllPatients();
        
        assertEquals(2, patients.size());
        verify(patientService, times(1)).getAllPatients();
    }

    @Test
    public void testGetPatientById() {
        when(patientService.getPatientById(1L)).thenReturn(patient1);

        ResponseEntity<Patient> response = patientController.getPatientById(1L);
        
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(patient1, response.getBody());
        verify(patientService, times(1)).getPatientById(1L);
    }

    @Test
    public void testGetPatientById_NotFound() {
        when(patientService.getPatientById(1L)).thenReturn(null);

        ResponseEntity<Patient> response = patientController.getPatientById(1L);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        verify(patientService, times(1)).getPatientById(1L);
    }

    @Test
    public void testCreatePatient() {
        when(patientService.savePatient(any(Patient.class))).thenReturn(patient1);

        Patient patient = patientController.createPatient(patient1);

        assertEquals(patient1, patient);
        verify(patientService, times(1)).savePatient(any(Patient.class));
    }

    @Test
    public void testUpdatePatient() {
        when(patientService.updatePatient(anyLong(), any(Patient.class))).thenReturn(patient1);

        ResponseEntity<Patient> response = patientController.updatePatient(1L, patient1);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(patient1, response.getBody());
        verify(patientService, times(1)).updatePatient(anyLong(), any(Patient.class));
    }

    @Test
    public void testUpdatePatient_NotFound() {
        when(patientService.updatePatient(anyLong(), any(Patient.class))).thenReturn(null);

        ResponseEntity<Patient> response = patientController.updatePatient(1L, patient1);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        assertNull(response.getBody());
        verify(patientService, times(1)).updatePatient(anyLong(), any(Patient.class));
    }

    @Test
    public void testDeletePatient() {
        when(patientService.deletePatient(anyLong())).thenReturn(true);

        ResponseEntity<Void> response = patientController.deletePatient(1L);

        assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());
        verify(patientService, times(1)).deletePatient(anyLong());
    }

    @Test
    public void testDeletePatient_NotFound() {
        when(patientService.deletePatient(anyLong())).thenReturn(false);

        ResponseEntity<Void> response = patientController.deletePatient(1L);

        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
        verify(patientService, times(1)).deletePatient(anyLong());
    }
}
